Project 7: K means clustering problem
 
Problem statement: Given a list of 2-D points, and a cluster number, K, the task is to partition the input point set to K clusters such that points within a cluster are closer to the centroid of their own cluster than to the centroids of all other clusters. 

Notes: 
1. You will be given a binary image, and ask the user to give you K during 
   run time.
2. You will read and extract 2D points from the binary image; 
   and output the extracted 2D points to outFile_1.
3. You will open outFile_1 and read the 2D points in the file 
   to do the cluster.
4. During the computation, you will output to outFile_2 
   the intermediate clustering results, in 2D format.
5. At the end of the clustering, you will write the clustering result 
to outFile_3: a list of 2D points with their labels as triplets, one triplet per text line.
       
**************************************
Language:  C++ 
Due date:  C++ soft copy: 11/9/2018 Friday before Midnight
        Early submission deadline: 11/7/2018 Wednesday before midnight
        Hard copy: 11/13/2018 Tuesday in class

**************************************
I. Input: inFile(argv[]): a txt file representing a binary  image with
    Header information (four integers) 
Note: there are spaces between each integer for easy programming!!

For example: 

8 8 0 1  // 8 rows, 8 columns, min value 0 and max value 1
0 0 1 1 1 0 0 0
0 1 1 1 1 0 0 0
0 0 1 1 0 0 0 0
0 0 0 0 0 0 1 1
0 0 0 0 1 1 1 0
0 0 0 0 1 1 1 0
0 0 0 0 1 1 1 0 
    
II. Outputs: 
- outFile_1 (use argv): This is the file you will produce 
during the run-time Of the program.  
The format for outFile_1 is as follows:

        For example from the image given in the above:
     
            0 2  // the none zero pixel is on row 0 and column 2 
             0 3  // the none zero pixel is on row 0 and column 3 
            :    
        :
        :
3 6 // the none zero pixel is on row 3 and column 
3 7 // the none zero pixel is on row 3 and column 
            :    
        :
- outFile_2 (use argv): A series of debugging display, one per iteration.  The printing format is as follows: if a pixel(I,j) has a label, displays its label, otherwise, display with a blank. 
(You must write the iteration #)

For example (the clustering results of the input in the above):

*** Result of iteration 1 ****
 
    1 1 1      
  1 1 1 2      
    2 2       
          1 2
        1 2 2 
        1 2 2  
        2 2 2 
:
:

*** Result of iteration 4 ****
 
    1 1 1      
  1 1 1 1      
    1 1       
          2 2
        2 2 2 
        2 2 2  
        2 2 2 

IV. outFile_3 (use argv): a txt file representing a list of  
2D points and their labels in the following format:
The first text line is the number of data points follows by the list of 2D pointsâ€™ x-y coordinates and pointsâ€™ labels. 

        For example:
        20      // 20 data points  
        8 8  // 8 rows and 8 columns of an image
            0 2 1 // the pixel is on row 0 and column 2 with label 1
             0 3 1 // the pixel is on row 0 and column 3 with label 1
            :    
        :
        :
3 6 2 // the pixel is on row 3 and column 6 with label 2
3 7 2 // the pixel is on row 3 and column 7 with label 2
            :    
        :
*******************************
IV. Data structure:
*******************************
- A Kmean class
- A Point class:
- Xcoord (int)
- Ycoord (int)
- Label (int)
- Distance (double) the distance to its own cluster centroid.

- A xyCoord class
    - Xcoord (int)
- Ycoord (int)
- Label (int)

- K (int) // ask user for the number of clusters
- numPts (int) // initialize to 0 
    - pointSet[numPts] (Point) // 1D array of Point class
// to be dynamically allocated during run-time
// initially set all points distance to 99999 a large distance
    - numRows (int) 
    - numCols (int)
    - minVal (int)
    - maxVal (int)

    - imgAry (** int) // a 2D array, size of  numRows by numCols

- Kcentroids[K] (xyCoord) 
// to be dynamically allocated in class constructor, size of K+1
// we do NOT want to use 0 as cluster label so the cluster label
// will run from 1 to K, therefore, the size of array is K+1

    - change (int) // for tracking the label changes, initialize to 0

    - constructor (.. )

    - int extractPts(inFile, outFile_1) // see algorithm below
// read from inFile and write none zero pixel to 
// outFile_1.
- loadPointSet (outFile_1, pointSet )
// read each point, p, from outFile_1 and store it onto
// the pointSet array.
// initially set pâ€™s Distance to 9999.0 a large distance.
// YOUR SHOULD KNOW HOW TO WRITE THIS METHOD!                 
    - assignLabel (pointSet, K)// assign each point a label from 1 to K
                    // sequentially in pointSet array.
// YOUR SHOULD KNOW HOW TO WRITE THIS METHOD!
    - kMeansClustering (pointSet, K) // see algorithm below

    - computeCentroids (pointSet, Kcentroids ) // see algorithm below
    // Go thru the entire pointSet array only  once
// to compute the centroids of each of the K clusters
// Store the computed centroids in each Kcentroids[label], 
// where label is from 1 to K.

    - DistanceMinLable (pointSet[index], Kcentroids) // see algorithm below
// compute the distance from a point p to each of the K centroids.
// check to see if pâ€™s label need to be change or not.
- computeDist(p1, p2) // p1 and p2 are 2D points. 
// Compute the distance from p1 to p2. 
// YOUR SHOULD KNOW HOW TO WRITE THIS METHOD!
    - writePtSet (pointSet, outFile_3)
        // write each point in pointSet with its label and xy location
//  to outFile_3
// See format in the above.
// YOUR SHOULD KNOW HOW TO WRITE THIS METHOD!

- Point2Image (pointSet, imgAry) // output to outFile_2
// read each point, pointSet[i], write the pointSet[i].Label 
// onto the imgAry. 
    // YOUR SHOULD KNOW HOW TO WRITE THIS METHOD!

- printImage (imgAry, outFile_2, iteration)
    // write the iteration before print the imgAry
// Print the imgAry to outFile_2 
        // if imgAry(i,j) > 0 
print imgAry(i,j)
else print one blank space.
// YOUR SHOULD KNOW HOW TO WRITE THIS METHOD!

*******************************
V. main (..)
*******************************
Step 0:  
inFile ðŸ¡¨ Open the input file argv[]
numRows, numCols, minVal, maxValðŸ¡¨ get from inFile.
imgAry ðŸ¡¨ Dynamically allocate a 2-D arrays, size numRows X numCols.
outFile_1, outFile_2, outFile_3 ðŸ¡¨ open from argv[], argv[], argv[] 
K ðŸ¡¨ ask user from console
Kcentroids[K] ðŸ¡¨ Dynamically allocate centroids struct, size of K+1

Step 1: numPts ðŸ¡¨ extractPts (inFile, outFile_1) // see algorithm below.
  pointSet ðŸ¡¨ Dynamically allocate the pointSet array, size of numPts       
     
Step 2: close outFile_1
   outFile_1 ðŸ¡¨ reopen outFile_1

Step 3: loadPointSet (outFile_1, pointSet)
Step 4: kMeansClustering (pointSet, K)
Step 5: writePtSet (pointSet, outFile_3)
Step 6: close all files

*******************************
VI. int extractPts(inFile, outFile_1)
*******************************    
Step 0: numPts ðŸ¡¨ 0
    Step 1: read inFile from left to right and top to bottom
          Use i, j as index for rows and cols bounded by numRows and numCols
    
Step 2: if p(i, j) > 0
            numPts++
                write i and j to outFile1
Step 3: repeat step 1 and step 2 until EOF inFile
    Step 4: return numPts

*******************************
VI. kMeansClustering (pointSet, K)
*******************************
Step 0: iteration ðŸ¡¨ 0
Step 1: assignLable (pointSet, K)

Step 2: Point2Image (pointSet, imgAry) 
   printImage (imgAry, outFile_2, iteration) 

Step 3: change ðŸ¡¨ 0
Step 4: computeCentroids (pointSet, Kcentroids) // see algorithm below
Step 5: index ðŸ¡¨ 0
Step 6: DistanceMinLable(pointSet[index], Kcentroids) // see algorithm below
Step 7: index ++ 
Step 8: repeat step 6 to step 7 while index < numPts
Step 9: iteration++
Step 10: repeat step 2 to step 9 until no more changes

*******************************
VII. computeCentroids (pointSet, Kcentroids ) 
*******************************
Step 0: sumX[K] ðŸ¡¨ dynamically allocate 1-D array, size of K
   sumY[K] ðŸ¡¨ dynamically allocate 1-D array, size of K
   totalPt[K] ðŸ¡¨ dynamically allocate 1-D array, size of K

        // initialize the above 3 1D arrays to 0
 
Step 1: index ðŸ¡¨ 0
Step 2: label ðŸ¡¨ pointSet[index].label // get the pointâ€™s cluster label
    sumX[label] += pointSet[index].Xcoord
      sumY[label] += pointSet[index].Ycoord
    totalPt[label] ++
Step 3: index++
Step 4: repeat step 2 to step 3 while index < numPts

step 5: label ðŸ¡¨ 1
step 6: Kcentroids[label].Xcoord ðŸ¡¨ (sumX[label]/ totalPt[label]) 
       Kcentroids[label].Ycoord ðŸ¡¨ (sumY[label]/ totalPt[label])

Step 7: label ++
Step 8: repeat step 6 to step 7 while label <= K

*******************************
VIII. DistanceMinLable (p, Kcentroids)
*******************************
Step 1: label ðŸ¡¨ 1

Step 2: dist ðŸ¡¨ computeDist(p, Kcentroids[label]) // 
       if pâ€™s Distance > dist
        pâ€™s label ðŸ¡¨ label
        change++
Step 3: label ++
Step 4: repeat step 2 to step 3 while label <= K

